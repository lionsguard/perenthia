#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lionsguard.Forums
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="lg")]
	public partial class ForumsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBoard(Board instance);
    partial void UpdateBoard(Board instance);
    partial void DeleteBoard(Board instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertReply(Reply instance);
    partial void UpdateReply(Reply instance);
    partial void DeleteReply(Reply instance);
    partial void InsertForum(Forum instance);
    partial void UpdateForum(Forum instance);
    partial void DeleteForum(Forum instance);
    partial void InsertTopic(Topic instance);
    partial void UpdateTopic(Topic instance);
    partial void DeleteTopic(Topic instance);
    #endregion
		
		public ForumsDataContext() : 
				base(global::Lionsguard.Properties.Settings.Default.lgConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForumsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Board> Boards
		{
			get
			{
				return this.GetTable<Board>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Reply> Replies
		{
			get
			{
				return this.GetTable<Reply>();
			}
		}
		
		public System.Data.Linq.Table<Forum> Forums
		{
			get
			{
				return this.GetTable<Forum>();
			}
		}
		
		public System.Data.Linq.Table<Topic> Topics
		{
			get
			{
				return this.GetTable<Topic>();
			}
		}
	}
	
	[Table(Name="dbo.lg_Boards")]
	public partial class Board : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BoardId;
		
		private string _BoardName;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private string _Description;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Forum> _Forums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnBoardNameChanging(string value);
    partial void OnBoardNameChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Board()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			OnCreated();
		}
		
		[Column(Storage="_BoardId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[Column(Storage="_BoardName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string BoardName
		{
			get
			{
				return this._BoardName;
			}
			set
			{
				if ((this._BoardName != value))
				{
					this.OnBoardNameChanging(value);
					this.SendPropertyChanging();
					this._BoardName = value;
					this.SendPropertyChanged("BoardName");
					this.OnBoardNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Board_Category", Storage="_Categories", OtherKey="BoardId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[Association(Name="Board_Forum", Storage="_Forums", OtherKey="BoardId")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Board = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Board = null;
		}
	}
	
	[Table(Name="dbo.lg_ForumCategories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private int _BoardId;
		
		private string _CategoryName;
		
		private int _SortOrder;
		
		private string _Description;
		
		private EntitySet<Forum> _Forums;
		
		private EntityRef<Board> _Board;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Category()
		{
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			this._Board = default(EntityRef<Board>);
			OnCreated();
		}
		
		[Column(Name="ForumCategoryId", Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Category_Forum", Storage="_Forums", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		[Association(Name="Board_Category", Storage="_Board", ThisKey="BoardId", IsForeignKey=true)]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._BoardId = value.BoardId;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.lg_ForumReplies")]
	public partial class Reply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReplyId;
		
		private int _TopicId;
		
		private int _PostedByUserId;
		
		private System.Nullable<System.DateTime> _PostDate;
		
		private string _ReplyText;
		
		private string _IPAddress;
		
		private EntityRef<Topic> _Topic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReplyIdChanging(int value);
    partial void OnReplyIdChanged();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnPostedByUserIdChanging(int value);
    partial void OnPostedByUserIdChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnReplyTextChanging(string value);
    partial void OnReplyTextChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    #endregion
		
		public Reply()
		{
			this._Topic = default(EntityRef<Topic>);
			OnCreated();
		}
		
		[Column(Name="ForumReplyId", Storage="_ReplyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReplyId
		{
			get
			{
				return this._ReplyId;
			}
			set
			{
				if ((this._ReplyId != value))
				{
					this.OnReplyIdChanging(value);
					this.SendPropertyChanging();
					this._ReplyId = value;
					this.SendPropertyChanged("ReplyId");
					this.OnReplyIdChanged();
				}
			}
		}
		
		[Column(Name="ForumTopicId", Storage="_TopicId", DbType="Int NOT NULL")]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostedByUserId", DbType="Int NOT NULL")]
		public int PostedByUserId
		{
			get
			{
				return this._PostedByUserId;
			}
			set
			{
				if ((this._PostedByUserId != value))
				{
					this.OnPostedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._PostedByUserId = value;
					this.SendPropertyChanged("PostedByUserId");
					this.OnPostedByUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReplyText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReplyText
		{
			get
			{
				return this._ReplyText;
			}
			set
			{
				if ((this._ReplyText != value))
				{
					this.OnReplyTextChanging(value);
					this.SendPropertyChanging();
					this._ReplyText = value;
					this.SendPropertyChanged("ReplyText");
					this.OnReplyTextChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Association(Name="Topic_Reply", Storage="_Topic", ThisKey="TopicId", OtherKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.Replies.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.Replies.Add(this);
						this._TopicId = value.TopicId;
					}
					else
					{
						this._TopicId = default(int);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.lg_Forums")]
	public partial class Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForumId;
		
		private int _BoardId;
		
		private int _CategoryId;
		
		private System.Nullable<int> _ParentForumId;
		
		private string _Title;
		
		private int _TopicCount;
		
		private int _ReplyCount;
		
		private System.Nullable<int> _LastPosterUserId;
		
		private System.Nullable<System.DateTime> _LastPostDate;
		
		private System.Nullable<int> _LastTopicId;
		
		private System.Nullable<int> _LastReplyId;
		
		private string _Description;
		
		private EntitySet<Forum> _Forums;
		
		private EntitySet<Topic> _Topics;
		
		private EntityRef<Board> _Board;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Forum> _lg_Forum1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnBoardIdChanging(int value);
    partial void OnBoardIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnParentForumIdChanging(System.Nullable<int> value);
    partial void OnParentForumIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTopicCountChanging(int value);
    partial void OnTopicCountChanged();
    partial void OnReplyCountChanging(int value);
    partial void OnReplyCountChanged();
    partial void OnLastPosterUserIdChanging(System.Nullable<int> value);
    partial void OnLastPosterUserIdChanged();
    partial void OnLastPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPostDateChanged();
    partial void OnLastTopicIdChanging(System.Nullable<int> value);
    partial void OnLastTopicIdChanged();
    partial void OnLastReplyIdChanging(System.Nullable<int> value);
    partial void OnLastReplyIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Forum()
		{
			this._Forums = new EntitySet<Forum>(new Action<Forum>(this.attach_Forums), new Action<Forum>(this.detach_Forums));
			this._Topics = new EntitySet<Topic>(new Action<Topic>(this.attach_Topics), new Action<Topic>(this.detach_Topics));
			this._Board = default(EntityRef<Board>);
			this._Category = default(EntityRef<Category>);
			this._lg_Forum1 = default(EntityRef<Forum>);
			OnCreated();
		}
		
		[Column(Storage="_ForumId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_BoardId", DbType="Int NOT NULL")]
		public int BoardId
		{
			get
			{
				return this._BoardId;
			}
			set
			{
				if ((this._BoardId != value))
				{
					if (this._Board.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoardIdChanging(value);
					this.SendPropertyChanging();
					this._BoardId = value;
					this.SendPropertyChanged("BoardId");
					this.OnBoardIdChanged();
				}
			}
		}
		
		[Column(Name="ForumCategoryId", Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_ParentForumId", DbType="Int")]
		public System.Nullable<int> ParentForumId
		{
			get
			{
				return this._ParentForumId;
			}
			set
			{
				if ((this._ParentForumId != value))
				{
					if (this._lg_Forum1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentForumIdChanging(value);
					this.SendPropertyChanging();
					this._ParentForumId = value;
					this.SendPropertyChanged("ParentForumId");
					this.OnParentForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TopicCount", DbType="Int NOT NULL")]
		public int TopicCount
		{
			get
			{
				return this._TopicCount;
			}
			set
			{
				if ((this._TopicCount != value))
				{
					this.OnTopicCountChanging(value);
					this.SendPropertyChanging();
					this._TopicCount = value;
					this.SendPropertyChanged("TopicCount");
					this.OnTopicCountChanged();
				}
			}
		}
		
		[Column(Storage="_ReplyCount", DbType="Int NOT NULL")]
		public int ReplyCount
		{
			get
			{
				return this._ReplyCount;
			}
			set
			{
				if ((this._ReplyCount != value))
				{
					this.OnReplyCountChanging(value);
					this.SendPropertyChanging();
					this._ReplyCount = value;
					this.SendPropertyChanged("ReplyCount");
					this.OnReplyCountChanged();
				}
			}
		}
		
		[Column(Storage="_LastPosterUserId", DbType="Int")]
		public System.Nullable<int> LastPosterUserId
		{
			get
			{
				return this._LastPosterUserId;
			}
			set
			{
				if ((this._LastPosterUserId != value))
				{
					this.OnLastPosterUserIdChanging(value);
					this.SendPropertyChanging();
					this._LastPosterUserId = value;
					this.SendPropertyChanged("LastPosterUserId");
					this.OnLastPosterUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastPostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPostDate
		{
			get
			{
				return this._LastPostDate;
			}
			set
			{
				if ((this._LastPostDate != value))
				{
					this.OnLastPostDateChanging(value);
					this.SendPropertyChanging();
					this._LastPostDate = value;
					this.SendPropertyChanged("LastPostDate");
					this.OnLastPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastTopicId", DbType="Int")]
		public System.Nullable<int> LastTopicId
		{
			get
			{
				return this._LastTopicId;
			}
			set
			{
				if ((this._LastTopicId != value))
				{
					this.OnLastTopicIdChanging(value);
					this.SendPropertyChanging();
					this._LastTopicId = value;
					this.SendPropertyChanged("LastTopicId");
					this.OnLastTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastReplyId", DbType="Int")]
		public System.Nullable<int> LastReplyId
		{
			get
			{
				return this._LastReplyId;
			}
			set
			{
				if ((this._LastReplyId != value))
				{
					this.OnLastReplyIdChanging(value);
					this.SendPropertyChanging();
					this._LastReplyId = value;
					this.SendPropertyChanged("LastReplyId");
					this.OnLastReplyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Forum_Forum", Storage="_Forums", OtherKey="ParentForumId")]
		public EntitySet<Forum> Forums
		{
			get
			{
				return this._Forums;
			}
			set
			{
				this._Forums.Assign(value);
			}
		}
		
		[Association(Name="Forum_Topic", Storage="_Topics", OtherKey="ForumId")]
		public EntitySet<Topic> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		[Association(Name="Board_Forum", Storage="_Board", ThisKey="BoardId", IsForeignKey=true)]
		public Board Board
		{
			get
			{
				return this._Board.Entity;
			}
			set
			{
				Board previousValue = this._Board.Entity;
				if (((previousValue != value) 
							|| (this._Board.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Board.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._Board.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._BoardId = value.BoardId;
					}
					else
					{
						this._BoardId = default(int);
					}
					this.SendPropertyChanged("Board");
				}
			}
		}
		
		[Association(Name="Category_Forum", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Forum_Forum", Storage="_lg_Forum1", ThisKey="ParentForumId", IsForeignKey=true)]
		public Forum lg_Forum1
		{
			get
			{
				return this._lg_Forum1.Entity;
			}
			set
			{
				Forum previousValue = this._lg_Forum1.Entity;
				if (((previousValue != value) 
							|| (this._lg_Forum1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lg_Forum1.Entity = null;
						previousValue.Forums.Remove(this);
					}
					this._lg_Forum1.Entity = value;
					if ((value != null))
					{
						value.Forums.Add(this);
						this._ParentForumId = value.ForumId;
					}
					else
					{
						this._ParentForumId = default(Nullable<int>);
					}
					this.SendPropertyChanged("lg_Forum1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.lg_Forum1 = this;
		}
		
		private void detach_Forums(Forum entity)
		{
			this.SendPropertyChanging();
			entity.lg_Forum1 = null;
		}
		
		private void attach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
	}
	
	[Table(Name="dbo.lg_ForumTopics")]
	public partial class Topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TopicId;
		
		private int _ForumId;
		
		private int _PostedByUserId;
		
		private System.Nullable<System.DateTime> _PostDate;
		
		private string _Title;
		
		private int _ViewCount;
		
		private int _ReplyCount;
		
		private string _TopicText;
		
		private string _IPAddress;
		
		private System.Nullable<int> _LastReplyUserId;
		
		private System.Nullable<System.DateTime> _LastReplyDate;
		
		private EntitySet<Reply> _Replies;
		
		private EntityRef<Forum> _Forum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnPostedByUserIdChanging(int value);
    partial void OnPostedByUserIdChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnViewCountChanging(int value);
    partial void OnViewCountChanged();
    partial void OnReplyCountChanging(int value);
    partial void OnReplyCountChanged();
    partial void OnTopicTextChanging(string value);
    partial void OnTopicTextChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnLastReplyUserIdChanging(System.Nullable<int> value);
    partial void OnLastReplyUserIdChanged();
    partial void OnLastReplyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastReplyDateChanged();
    #endregion
		
		public Topic()
		{
			this._Replies = new EntitySet<Reply>(new Action<Reply>(this.attach_Replies), new Action<Reply>(this.detach_Replies));
			this._Forum = default(EntityRef<Forum>);
			OnCreated();
		}
		
		[Column(Name="ForumTopicId", Storage="_TopicId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_ForumId", DbType="Int NOT NULL")]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostedByUserId", DbType="Int NOT NULL")]
		public int PostedByUserId
		{
			get
			{
				return this._PostedByUserId;
			}
			set
			{
				if ((this._PostedByUserId != value))
				{
					this.OnPostedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._PostedByUserId = value;
					this.SendPropertyChanged("PostedByUserId");
					this.OnPostedByUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_ViewCount", DbType="Int NOT NULL")]
		public int ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[Column(Storage="_ReplyCount", DbType="Int NOT NULL")]
		public int ReplyCount
		{
			get
			{
				return this._ReplyCount;
			}
			set
			{
				if ((this._ReplyCount != value))
				{
					this.OnReplyCountChanging(value);
					this.SendPropertyChanging();
					this._ReplyCount = value;
					this.SendPropertyChanged("ReplyCount");
					this.OnReplyCountChanged();
				}
			}
		}
		
		[Column(Storage="_TopicText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TopicText
		{
			get
			{
				return this._TopicText;
			}
			set
			{
				if ((this._TopicText != value))
				{
					this.OnTopicTextChanging(value);
					this.SendPropertyChanging();
					this._TopicText = value;
					this.SendPropertyChanged("TopicText");
					this.OnTopicTextChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Column(Storage="_LastReplyUserId", DbType="Int")]
		public System.Nullable<int> LastReplyUserId
		{
			get
			{
				return this._LastReplyUserId;
			}
			set
			{
				if ((this._LastReplyUserId != value))
				{
					this.OnLastReplyUserIdChanging(value);
					this.SendPropertyChanging();
					this._LastReplyUserId = value;
					this.SendPropertyChanged("LastReplyUserId");
					this.OnLastReplyUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastReplyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastReplyDate
		{
			get
			{
				return this._LastReplyDate;
			}
			set
			{
				if ((this._LastReplyDate != value))
				{
					this.OnLastReplyDateChanging(value);
					this.SendPropertyChanging();
					this._LastReplyDate = value;
					this.SendPropertyChanged("LastReplyDate");
					this.OnLastReplyDateChanged();
				}
			}
		}
		
		[Association(Name="Topic_Reply", Storage="_Replies", ThisKey="TopicId", OtherKey="TopicId")]
		public EntitySet<Reply> Replies
		{
			get
			{
				return this._Replies;
			}
			set
			{
				this._Replies.Assign(value);
			}
		}
		
		[Association(Name="Forum_Topic", Storage="_Forum", ThisKey="ForumId", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._ForumId = value.ForumId;
					}
					else
					{
						this._ForumId = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_Replies(Reply entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
	}
}
#pragma warning restore 1591
